// This is the public API offered by the raid boss entity
syntax = "proto3";

import "google/protobuf/empty.proto";
import "cloudstate/entity_key.proto";
import "cloudstate/eventing.proto";
import "google/api/annotations.proto";

package org.justinhj.raidbossservice;

// A command to create (summon) a raid boss
// Note the use of the cloudstate.entity_key field option extension,
// this is used to indicate which field(s) form the entity key, which
// the Akka backend will use to identify entities and shard them
// (in this example  `boss_instance_id` ).

message RaidBossCreate {
    string boss_instance_id = 1 [(.cloudstate.entity_key) = true];
    string boss_def_id = 2 ;
    string group_id = 3 ;
}

// Command to simply return the boss for viewing the current state

message RaidBossView {
  string boss_instance_id = 1 [(.cloudstate.entity_key) = true];
}

// Command to attack the boss

message RaidBossAttack {
  string boss_instance_id = 1 [(.cloudstate.entity_key) = true];
  string player_id = 2 ;
  int64 damage = 3 ;
}

// Leaderboard entry
message LeaderboardEntry {
  string player_id = 1 ;
  int64 score = 2 ;
}

// Raidboss instance
message RaidBossInstance {
  string boss_instance_id = 1 ;
  string boss_def_id = 2 ;
  int64 health = 3 ;
  repeated LeaderboardEntry leaderboard = 4 ;
  int64 created = 5 ;
  int64 updated = 6 ;
  string group_id = 7 ;
  string killed_by = 8 ;
}

// Service definition
service RaidBossService {

  // Create (or summon) a boss
  rpc CreateRaidBoss(RaidBossCreate) returns (google.protobuf.Empty) {
    // option (google.api.http) specifies that this method is a gRPC HTTP mapping annotation
    // for more info see: https://cloud.google.com/endpoints/docs/grpc/transcoding
    option (google.api.http) = {
      post: "/raidboss/create",
      body: "*"
    };
  }

  // Call to return the state from an entity.
  rpc ViewRaidBoss(RaidBossView) returns (RaidBossInstance) {
    // option (google.api.http) specifies that this method is a gRPC HTTP mapping annotation
    // for more info see: https://cloud.google.com/endpoints/docs/grpc/transcoding
    option (google.api.http) = {
      get: "/raidboss/get/{boss_instance_id}"
    };
  }

  // Call attack a boss and return the current state
  rpc AttackRaidBoss(RaidBossAttack) returns (google.protobuf.Empty) {
    // option (google.api.http) specifies that this method is a gRPC HTTP mapping annotation
    // for more info see: https://cloud.google.com/endpoints/docs/grpc/transcoding
    option (google.api.http) = {
      post: "/raidboss/attack",
      body: "*"
    };
  }
}
